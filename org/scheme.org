Run this to load scheme and guile.
Use ~(display (xxx))~ and ~:results output~ for regular blocks.

#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scheme . t)))
#+end_src

#+name: hello-world
#+header: :session :var message="Hello Worlddd!"
#+begin_src scheme 
  message
#+end_src

#+RESULTS: hello-world
: Hello Worlddd!

#+begin_src scheme :results output
  (map (lambda (x) (modulo x 2)) (iota 10))
#+end_src

#+RESULTS:


#+name: hello-world-racket
#+header: :session :var my-language='Greek
#+begin_src scheme
(define translations
  #hash([English . "Hello world"]
        [French . "Bonjour le monde"]
        [German . "Hallo Welt"]
        [Greek . "Γειά σου, κόσμε"]
        [Portuguese . "Olá mundo"]
        [Spanish . "Hola mundo"]
        [Thai . "สวัสดีชาวโลก"]))
(hash-ref translations my-language
            "hello world")
#+end_src

#+RESULTS: hello-world-racket

#+begin_src scheme :results output
(define a (list 1 2 3 4))

(define (list-set! list k val)
    (if (zero? k)
        (set-car! list val)
        (list-set! (cdr list) (- k 1) val)))

(list-set! a 2 100) 
#+end_src

#+begin_src scheme :results output
  (display (car(append '(1) 4)))
#+end_src

#+begin_src scheme :results value
(length (make-list 40 0))
#+end_src

#+begin_src scheme :results value
(car (cdr (list 1 7 3 4)))
#+end_src

