#+OPTIONS:   num:nil toc:nil

* tangle sclang
** sclang template
   :PROPERTIES:
   :header-args: :results value code :exports code :noweb yes 
   :END:
   By providing a boiler plate in sclang that fetches data through noweb references a complete Pbind can be constructed. This particular instance fetches a ~\dur~ key word with a ~Pseq()~ data list.
  #+begin_src sclang :tangle pbind.sc 
    Pbind(\instrument, \snare,
	<<repeat_list_full()>>
    ).play
  #+end_src

  #+RESULTS:

** scheme boiler plate
   :PROPERTIES:
   :header-args: :results output raw :exports code :noweb yes :wrap "SRC sclang :tangle sclang_output.sc" 
   :END:
   This is similar to the [[*sclang template][sclang template]] example above, but uses scheme. For some reason it does not appear to be possible to tangle the result of this evaluation, but it works fine with writing it to file on C-c C-c. It applies the various outputs of ~make_pseq()~ and the like as variables. Removing the :file directive makes it output a ready a execute sclang results block.
*** plain
   Variables:
   - inst: the SC instrument to send the stream to
   - dur: the parameter to generate data for, in this case it defaults to make_pseq
   #+begin_src scheme :var inst="\\snare " :var dur=repeat_list_full() :tangle no
     (use-modules (ice-9 format))
     (display "Pbind(\\instrument, ")
     (format #t "~a," inst)
     (display dur)
     (display ").play")
   #+end_src

   #+RESULTS:
   #+begin_SRC sclang :tangle sclang_output.sc
   Pbind(\instrument, \snare ,\dur, Pseq([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625 ], inf)).play
   #+end_SRC

      #+RESULTS:
   #+begin_SRC sclang :tangle sclang_output.sc
   Pbind(\instrument, \snare ,\dur, Pseq([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625 ], inf)).play
   #+end_SRC

*** noweb version 
    This version of the [[*plain][plain]] example above inserts the code of the ~repeat_list~ function definition ([[*repeat list for rhythmic patterns][repeat list for rhythmic patterns]]). The Scheme code can be tangled, in this case to 'tangleme.scm'. The result can be saved to file by adding a :file header and specify the name of the file. Finally, the result block (sclang code) can be tangled, but the result block is not generated when the :file directive is present, which writes to sclang_output.txt. Note that this file name is set in the header-args for [[*scheme boiler plate][scheme boiler plate]] and all the code in all results block will appended to the same file.

    In summary:
    - C-c C-c on a code block generates a Pbind
    - C-c C-v t tangles all of the generated files to sclang_output.sc

   Variables:
   - inst: the SC instrument to send the stream to
   #+begin_src scheme :var inst="\\snare" :tangle generic_pbind.scm :noweb yes

     ;; Include repeat_list
     <<repeat_list>>

     ;; Pbind definition to output with instrument
     (display "Pbind(\\instrument, ")
     (format #t "~a,~&" inst)

     ;; Add data to it
     (pseries (apply append (repeat 4 '(1 0.5 0.25))) 0)

     ;; Close the Pbind
     (display ").play")
   #+end_src

   #+RESULTS:
   #+begin_SRC sclang :tangle sclang_output.sc
   Pbind(\instrument, \snare,
   \dur, Pseq([1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25 ], inf)).play
   #+end_SRC
   
   A version of the above for the i_filtered_snare_dispersed.dsp
   #+begin_src scheme :var inst="\\isnaredisp" :noweb yes

     ;; Include repeat_list
     <<repeat_list>>

     ;; Pbind definition to output with instrument
     (display "Pbind(\\instrument, ")
     (format #t "~a,~&" inst)

     ;; Add data to it
     (pseries (apply append (repeat 4 '(1 0.5 0.25))) 0)

     ;; Close the Pbind
     (display ").play")
   #+end_src

   #+RESULTS:
   #+BEGIN_SRC sclang :tangle sclang_output.sc :output none
   Pbind(\instrument, \isnaredisp,
   \dur, Pseq([1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25 ], inf)).play
   #+END_SRC

   #+RESULTS:
   #+BEGIN_SRC sclang :tangle sclang_output.sc
   Pbind(\instrument, \isnaredisp,
   \dur, Pseq([1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25 ], inf)).play
   #+END_SRC

    This version of the [[*plain][plain]] example above inserts the code of the ~repeat_list~ function definition ([[*repeat list for rhythmic patterns][repeat list for rhythmic patterns]]). The Scheme code can be tangled, in this case to 'tangleme.scm'. The result can be saved to file by adding a :file header and specify the name of the file. Finally, the result block (sclang code) can be tangled, but the result block is not generated when the :file directive is present, which writes to sclang_output.txt. Note that this file name is set in the header-args for [[*scheme boiler plate][scheme boiler plate]] and all the code in all results block will appended to the same file.

    In summary:
    - C-c C-c on a code block generates a Pbind
    - C-c C-v t tangles all of the generated files to sclang_output.sc

   Variables:
   - inst: the SC instrument to send the stream to
   #+begin_src scheme :var inst="\\snare" :tangle generic_pbind.scm :noweb yes

     ;; Include repeat_list
     <<repeat_list>>

     ;; Pbind definition to output with instrument
     (display "Pbind(\\instrument, ")
     (format #t "~a,~&" inst)

     ;; Add data to it
     (pseries (apply append (repeat 4 '(1 0.5 0.25))) 0)

     ;; Close the Pbind
     (display ").play")
   #+end_src

   #+RESULTS:
   #+BEGIN_SRC sclang :tangle sclang_output.sc
   Pbind(\instrument, \snare,
   \dur, Pseq([1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25 ], inf)).play
   #+END_SRC

*** pbind for isnare_def
    This version includes data using :vars. This is more clumsy in terms of execution than using noweb.

    Variables:
    - inst: the SC instrument to send the stream to
    - dur: the parameter to generate data for, in this case it defaults to make_pseq
   #+begin_src scheme :tangle vars.scm :var inst="\\isnare" :var dur = repeat_list_full(source_list=(list 0.5 0.4 0.3 0.2)) freq = format_list(elements = list_multiplier_sin(mult=300), param = "\\osc1", function="Prand") noise = format_list(elements = list_multiplier_sin(mult=0.01, add=0), param = "\\noise", function="Prand") freq = format_list(elements = list_multiplier_sin(mult=20, add=2), param = "\\freq", function="Pseq")
     (use-modules (ice-9 format))
     (display "Pbind(\\instrument, ")
     (format #t "~a," inst)
     (display dur)
     (display ", ")
     (display freq)
     (display ", ")
     (display noise)
     (display ").play")
   #+end_src

   #+RESULTS:
   #+begin_SRC sclang :tangle sclang_output.sc
   Pbind(\instrument, \isnare,\dur, Pseq([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2 ], inf), \freq, Pseq([2.0, 3.9966683329365633, 5.973386615901225, 7.910404133226792, 9.78836684617301, 11.58851077208406, 13.292849467900709, 14.884353744753822, 16.347121817990455, 17.666538192549666, 18.82941969615793, 19.82414720122871, 20.640781719344528, 21.27116370834386, 21.708994599769206, 21.94989973208109, 21.9914720608301, 21.833296209049372, 21.476952617563903, 20.926001753748288, 20.185948536513635, 19.264187332977475, 18.169928076391802, 16.9141042435344, 15.509263611023012, 13.96944288207913, 12.310027436429284, 10.547597604676596, 8.699763003118093, 6.78498658427964, 4.822400161197344 ], inf), \noise, Prand([0.0, 9.983341664682815e-4, 0.0019866933079506124, 0.002955202066613396, 0.0038941834230865053, 0.00479425538604203, 0.005646424733950355, 0.006442176872376911, 0.007173560908995228, 0.007833269096274834, 0.008414709848078966, 0.008912073600614355, 0.009320390859672264, 0.00963558185417193, 0.009854497299884604, 0.009974949866040545, 0.00999573603041505, 0.009916648104524686, 0.009738476308781953, 0.009463000876874145, 0.009092974268256818, 0.008632093666488738, 0.008084964038195901, 0.0074570521217672, 0.006754631805511506, 0.005984721441039565, 0.005155013718214641, 0.004273798802338298, 0.0033498815015590468, 0.00239249329213982, 0.001411200080598672 ], inf)).play
   #+end_SRC

*** noweb isnare2
    This creates a Pbind with the attributes defined in ~isnare2_pbind_list~ ([[*pbind attribute list][pbind attribute list]]).
    - C-c C-c on a code block generates a Pbind
    - C-c C-v t tangles all of the generated files to sclang_output.sc

   Variables:
   - inst: the SC instrument to send the stream to
   #+begin_src scheme :var inst="\\isnare2" :tangle isnare2_pbind.scm :noweb yes
     ;; Include repeat_list
     <<repeat_list_alt>>
     <<isnare2_pbind_list>>
     ;; Instantiate the group and the control instruments
     (display "~group = Group.new; ~freq_ctrl = Synth(\\control_saw2, [\\bus, ~saw_control_bus_1.index, \\freq, 1, \\mult, 1, \\add, 1], ~group, \\addToHead); ~freq_ctrl2 = Synth(\\control_saw2, [\\bus, ~saw_control_bus_2.index, \\freq, 1, \\mult, 1, \\add, 1], ~group, \\addToHead); ~impulse_ctrl = Synth(\\control_saw2, [\\bus, ~saw_control_bus_3.index, \\freq, 0.5, \\mult, 1, \\add, 1], ~group, \\addToHead);")
     (display "Pbind(\\instrument, ")
     (format #t "~a,~&" inst)

     (print-list 0 (map 
		    (lambda (x) 
		      (format #f "\\~a, ~a" (car x) (cdr x))) attributes))

     ;; Repeat the four statements below this for more parameters
     ;; Add a parameter to the EventList

     ;; Close the Pbind
     (display ").play")
   #+end_src

   #+RESULTS:
   #+begin_SRC sclang :tangle sclang_output.sc
   ice-9/boot-9.scm:1669:16: In procedure raise-exception:
   Unbound variable: print-list

   Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
   scheme@(guile-user) [1]> 
   #+end_SRC

**** Call preset in snares.org
     #+name: preset_1
     #+call: snares.org:isnare_preset_1()

** helper functions
*** pbind filter attributes
   :PROPERTIES:
   :header-args: :results value
   :END:
**** attribute/value factory
***** main pbind function
      See last line (call to print-list function) for a method for adding parameter/value pairs to the ~attributes~ list through the variable params as a list of lists: ~(list (list "new1" 1) (list "new2" 2))~, but also, as below, by calling the function filter_attributes.

      The values for the method are:
      - seq-array
      - seq-array-reciprocal 
      - seq-array-exponential
      - seq-array-log
      - seq-array-sin
      - seq-array-cos

      Functions:
      - print-list: format the Pbind
      - attributes: the default list of attributes
      - make-filter-attributes /length arrays-size method shifted/: genrate the key/value pair list to be appended to ~attributes~

      Functions included from ~filter_attributes~:
      - attributes-array

      Function included from [[*attribute list][attribute list]]:
      - attrlist

      Variables: 
      - params: a call to filter_attributes (see [[*filter attributes][filter attributes]]) that provides a list of Pseq arrays.
      #+begin_src scheme :results output raw :exports code :noweb yes :wrap "SRC sclang :tangle sclang_output.sc :results none"
	<<filter_attributes>>
	<<shift_list>>

	(define l 8) ;; length of array
	(define a 16) ;; number of items in the Pseq
	(define m 4) ;; method for generating 'a'
	(define s 1) ;; whether or not 'a' should be shifted
	(define p "Pshuf") ;; function for the array (Pseq, Pshuf, Prand, Pxrand, Place)

	(define make-filter-attributes
	  (lambda (lgth array-size method shifted)
	    (attributes-array (attrlist 0 lgth (list))
			      (make-pbind-array-list 0 lgth
						     (make-shift-list lgth
								      (map
								       (lambda (x) (* -80 x))
								       (select-seq-array 
									0 array-size (list) method))
								      shifted) '() p) (list))))

	(define (print-list i lst)
	  (when (< i (length lst))
	    (format #t "~a,~&" (list-ref lst i))
	    (print-list (1+ i) lst)))

	(define attributes (list (list "group" "~group")
				 (list "addAction" 1)
				 (list "position" 0)
				 (list "disperse" 0)
				 (list "noise" 0)
				 (list "freq" 1)
				 (list "dur" 1)
				 (list "inBus1" "~saw_control_bus_1.index")
				 (list "inBus2" "~saw_control_bus_2.index")
				 (list "inBus3" "~saw_control_bus_3.index")))

	(define filter-mod-attributes (list (list "instrument" "\\isnare_filter_mod_8")
					    (list "dur" (format #f "~a" (car (make-pbind-array-list 0 1 (make-shift-list 4 (select-seq-array 1 30 (list) 0) 1) '()))))
					    (list "freq" 1)
					    (list "freq_mod" 0)
					    (list "del" 100)
					    (list "del_mod" 0)))
	(format #t "~a(" "Pbind")
	(print-list 0 (map 
		       (lambda (x) 
			 (format #f "\\~a, ~a" (car x) (cadr x)))
		       (append filter-mod-attributes
			       (make-filter-attributes l a m s))))
	(format #t ")~a" ".play;")	  
      #+end_src

      #+RESULTS:
      #+begin_SRC sclang :tangle sclang_output.sc :results none
      Pbind(\instrument, \isnare_filter_mod_8,
      \dur, Pseq([0.034482758620689655, 0.06896551724137931, 0.10344827586206896, 0.13793103448275862, 0.1724137931034483, 0.20689655172413793, 0.2413793103448276, 0.27586206896551724, 0.3103448275862069, 0.3448275862068966, 0.3793103448275862, 0.41379310344827586, 0.4482758620689655, 0.4827586206896552, 0.5172413793103449, 0.5517241379310345, 0.5862068965517241, 0.6206896551724138, 0.6551724137931034, 0.6896551724137931, 0.7241379310344828, 0.7586206896551724, 0.7931034482758621, 0.8275862068965517, 0.8620689655172413, 0.896551724137931, 0.9310344827586207, 0.9655172413793104, 1.0, ], inf),
      \freq, 1,
      \freq_mod, 0,
      \del, 100,
      \del_mod, 0,
      \b1, Pshuf([-0.0, -15.607225763301887, -30.614674592996998, -44.445618646684295, -56.568542500725, -66.5175689899011, -73.91036260561232, -78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, ], inf),
      \b2, Pshuf([-15.607225763301887, -30.614674592996998, -44.445618646684295, -56.568542500725, -66.5175689899011, -73.91036260561232, -78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, -0.0, ], inf),
      \b3, Pshuf([-30.614674592996998, -44.445618646684295, -56.568542500725, -66.5175689899011, -73.91036260561232, -78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, -0.0, -15.607225763301887, ], inf),
      \b4, Pshuf([-44.445618646684295, -56.568542500725, -66.5175689899011, -73.91036260561232, -78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, -0.0, -15.607225763301887, -30.614674592996998, ], inf),
      \b5, Pshuf([-56.568542500725, -66.5175689899011, -73.91036260561232, -78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, -0.0, -15.607225763301887, -30.614674592996998, -44.445618646684295, ], inf),
      \b6, Pshuf([-66.5175689899011, -73.91036260561232, -78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, -0.0, -15.607225763301887, -30.614674592996998, -44.445618646684295, -56.568542500725, ], inf),
      \b7, Pshuf([-73.91036260561232, -78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, -0.0, -15.607225763301887, -30.614674592996998, -44.445618646684295, -56.568542500725, -66.5175689899011, ], inf),
      \b8, Pshuf([-78.4628224350594, -80.0, -78.4628224286572, -73.91036259305397, -66.51756897166919, -56.5685424775202, -44.44561861939833, -30.61467456267846, -15.607225731115896, -0.0, -15.607225763301887, -30.614674592996998, -44.445618646684295, -56.568542500725, -66.5175689899011, -73.91036260561232, ], inf),
      ).play;
      #+end_SRC

      Example use of the attribute list function:
      #+begin_src scheme :noweb yes
	<<filter_attributes>>
	(attrlist 0 4 '())
      #+end_src

      Example to generate a list of Psequences:
      | Pseq([0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, ], inf) |
      #+begin_src scheme :noweb yes :results value
	<<filter_attributes>>
	<<shift_list>>
	(make-pbind-array-list 0 1 (make-shift-list 4 (select-seq-array 4 9 (list) 0) 1) '())
      #+end_src

      #+RESULTS:

      Example of use of the simpler call to make-pbind-array to generate a list of Psequences:
      | Pseq([0.0, 0.3333333333333333, 0.6666666666666666, 1.0, ], inf) | Pseq([0.0, 0.3333333333333333, 0.6666666666666666, 1.0, ], inf) |
      #+begin_src scheme :noweb yes :results value
	<<filter_attributes>>
	<<shift_list>>
	(format #f "~a" (car (make-pbind-array 0 4 4 '())))
      #+end_src

***** isnaredisp pbind function
      See last line (call to print-list function) for a method for adding parameter/value pairs to the ~attributes~ list through the variable params as a list of lists: ~(list (list "new1" 1) (list "new2" 2))~, but also, as below, by calling the function filter_attributes.

      The values for the method are:
      - seq-array
      - seq-array-reciprocal 
      - seq-array-exponential
      - seq-array-log
      - seq-array-sin
      - seq-array-cos

      Functions:
      - print-list: format the Pbind
      - attributes: the default list of attributes
      - make-filter-attributes /length arrays-size method shifted/: genrate the key/value pair list to be appended to ~attributes~

      Functions included from ~filter_attributes~:
      - attributes-array

      Function included from [[*attribute list][attribute list]]:
      - attrlist

      Variables: 
      - params: a call to filter_attributes (see [[*filter attributes][filter attributes]]) that provides a list of Pseq arrays.
      #+name: insaredisp_pbind      
    #+begin_src scheme :results output raw :exports code :noweb yes :wrap "SRC sclang :tangle sclang_output.sc :results none"
	<<filter_attributes>>
	<<shift_list>>

	(define l 0) ;; length of array
	(define a 4) ;; number of items in the Pseq
	(define m 4) ;; method for generating 'a'
	(define s 1) ;; whether or not 'a' should be shifted
	(define p "Pshuf") ;; function for the array (Pseq, Pshuf, Prand, Pxrand, Place)

	(define make-filter-attributes
	  (lambda (lgth array-size method shifted)
	    (attributes-array (attrlist 0 lgth (list))
			      (make-pbind-array-list 0 lgth
						     (make-shift-list lgth
								      (map
								       (lambda (x) (* -80 x))
								       (select-seq-array 
									0 array-size (list) method))
								      shifted) '() p) (list))))

	(define (print-list i lst)
	  (when (< i (length lst))
	    (format #t "~a,~&" (list-ref lst i))
	    (print-list (1+ i) lst)))

	(define attributes (list (list "instrument" "\\isnaredisp")
;;				 (list "pulse_period" (car (make-pbind-array-list 0 1 (make-list 4 (make-list 4 10000)) '())))
				 (list "pulse_period" 10000)
				 (list "random" 1)
				 (list "osc1" 50)
				 (list "osc2" 52)
				 (list "triangle" 500)
				 (list "noise_lvl" 0.1)
				 (list "noise_attack" 0.0001)
				 (list "noise_rel" 0.1)))

	(define filter-mod-attributes
	  (list
	   (list "instrument" "\\isnaredisp")
	   (list "dur"
		 (format #f "~a"
			 (car (make-pbind-array-list 0 1
						     (make-shift-list 4
								      (select-seq-array 1 20 (list) 0) 1) '()))))
	   (list "freq" 1)
	   (list "freq_mod" 0)
	   (list "smth" (car (make-pbind-array-list 0 1 (make-list 4 (make-list 4 1)) '())))
	   (list "del_mod" 0)))

	(format #t "~a(" "Pbind")
	(print-list 0 (map 
		       (lambda (x) 
			 (format #f "\\~a, ~a" (car x) (cadr x)))
		       (append attributes
			       (make-filter-attributes l a m s))))
	(format #t ")~a" ".play;")	  
	    #+end_src

	    #+RESULTS: insaredisp_pbind
	    #+begin_SRC sclang :tangle sclang_output.sc :results none
	    Pbind(\instrument, \isnaredisp,
	    \pulse_period, 10000,
	    \random, 1,
	    \osc1, 50,
	    \osc2, 52,
	    \triangle, 500,
	    \noise_lvl, 0.1,
	    \noise_attack, 1.0e-4,
	    \noise_rel, 0.1,
	    ).play;
	    #+end_SRC

	  Example use of the attribute list function:
	  #+begin_src scheme :noweb yes
	    <<filter_attributes>>
	    <<shift_list>>
	    <<filter_attributes>>
	  #+end_src

	  #+RESULTS:
	  : #<unspecified>

	  Example to generate a list of Psequences:
          | Pseq([0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, ], inf) |
	  #+begin_src scheme :noweb yes :results value
	    <<filter_attributes>>
	    <<shift_list>>
	    (make-pbind-array-list 0 1 (make-shift-list 4 (select-seq-array 4 9 (list) 0) 1) '())
	  #+end_src

	  #+RESULTS:
	  | Pseq([0.5, 0.625, 0.75, 0.875, 1.0, ], inf) |

	  Example of use of the simpler call to make-pbind-array to generate a list of Psequences:
	  | Pseq([0.0, 0.3333333333333333, 0.6666666666666666, 1.0, ], inf) | Pseq([0.0, 0.3333333333333333, 0.6666666666666666, 1.0, ], inf) |
	  #+begin_src scheme :noweb yes :results value
	    <<filter_attributes>>
	    <<shift_list>>
	    (format #f "~a" (car (make-pbind-array 0 4 4 '())))
	  #+end_src

	  #+RESULTS:
	  : Pseq([0.0, 0.3333333333333333, 0.6666666666666666, 1.0, ], inf)

***** filter attributes
      Call this to create a list of pairs (lists) with attribute name, and value for a give SynthDef. This uses two helper function below that generate the attributes and the values. In the version below it outputs a list of pairs, useful for the ~isnare2_pbind_list~ above.

      The code from ~attribute_list~ (see [[*attribute list][attribute list]]) is included and called in the last row (attr_
      The code from ~value_sequence~ is included and called by ~repeats 0 3 5 (list)~ (see [[*value sequence][value sequence]]).

      To use this include <<filter_attributes>> and call:
      
      ~(attributes-array (attrlist 0 length (list)) (repeats 0 items length (list)) (list))~

      The two variables ~length~ and ~items~ need to be set. See [[*filter attributes example][filter attributes example]] for a working example.
      #+name: filter_attributes
      #+begin_src scheme :noweb yes :var lgth=10 items=3
	<<attribute_list>>
	<<value_sequence>>
	<<single_value_list>>

	(define attributes-array
	  (lambda (lstatt lstval newlst)
	    (cond ((= 0 (length lstatt)) newlst)
		  ((= 0 (length lstval)) newlst)
		  ((attributes-array
		    (cdr lstatt)
		    (cdr lstval)
		    (append newlst (list (list (car lstatt) (car lstval)))))))))
      #+end_src

      #+RESULTS: filter_attributes

****** filter attributes examples
       Example using sequenced_array and shift_list to generate the input to make-pbind-array-list.

       Included functions: 
       - attributes-array /attr-list pseq-list new-list/
       - attrlist /index rows result/
       - make-pbind-array-list /index rows list-of-pseq/
       - make-shift-list /size sequence result . flag/: set the flag to 1 for a non-shifted list.
       - seq-array-sin /index size result/: choose the type of parameter list.

       Function:
       - make-filter-attributes /length array-size list-method shifted/: utility method to create an array of filter settings.
       #+begin_src scheme :noweb yes
	 <<shift_list>>
	 <<filter_attributes>>

	 (define make-filter-attributes
	   (lambda (lgth array-size method shifted)
	     (attributes-array (attrlist 0 lgth (list))
			       (make-pbind-array-list 0 4 (make-shift-list 4 (map (lambda (x) (* -80 x)) (select-seq-array 0 20 (list) method)) shifted) '())
			       (list))))
	 (make-filter-attributes 4 4 1 1)
       #+end_src

       #+begin_src scheme :noweb yes
<<sequenced_array>>
(map (lambda (x) (* -80 x)) (select-seq-array 0 9 (list) 0))
       #+end_src

       #+RESULTS:
       | -0.0 | -10.0 | -20.0 | -30.0 | -40.0 | -50.0 | -60.0 | -70.0 | -80.0 |

       Example using sequenced_array and shift_list to generate the input to make-pbind-array-list. Same as above but with arguemnts.

       Functions: 
       - attributes-array /attr-list pseq-list new-list/
       - attrlist /index rows result/
       - make-pbind-array-list /index rows list-of-pseq/
       - make-shift-list /size sequence result . flag/: set the flag to 1 for a non-shifted list.
       - seq-array-sin /index size result/: choose the type of parameter list.
       #+begin_src scheme :noweb yes
	 <<filter_attributes>>
	 <<sequenced_array>>
	 <<shift_list>>
	 <<value_sequence>>
	 ;; create the array of pbind data
	 (define pseq (make-pbind-array-list 0 4 (make-shift-list 4 (seq-array-sin 0 9 (list))) '()))
	 ;; create a table of parameter/value pairs.
	 (attributes-array (attrlist 0 4 (list)) pseq (list))
       #+end_src

       #+RESULTS:
       | b1 | Pseq([0.0, 0.3420201433684985, 0.6427876097563697, 0.8660254038528064, 0.9848077530438666, 0.9848077529726349, 0.8660254036477031, 0.6427876094421329, 0.3420201429830303, ], inf) |
       | b2 | Pseq([0.0, 0.3420201433684985, 0.6427876097563697, 0.8660254038528064, 0.9848077530438666, 0.9848077529726349, 0.8660254036477031, 0.6427876094421329, 0.3420201429830303, ], inf) |
       | b3 | Pseq([0.0, 0.3420201433684985, 0.6427876097563697, 0.8660254038528064, 0.9848077530438666, 0.9848077529726349, 0.8660254036477031, 0.6427876094421329, 0.3420201429830303, ], inf) |
       | b4 | Pseq([0.0, 0.3420201433684985, 0.6427876097563697, 0.8660254038528064, 0.9848077530438666, 0.9848077529726349, 0.8660254036477031, 0.6427876094421329, 0.3420201429830303, ], inf) |

***** attribute list
     Generate the attribute list: b0 -> blgth
     Call this function with ~(attrlist startindx length list-to-append-to)~.
     #+name: attribute_list
     #+begin_src scheme :var lgth=10
     (define attrlist
	(lambda (i n x)
	  (if (= i n)
	      x
	      (attrlist (+ i 1) n (append x (list (format #f "b~d" (1+ i))))))))
     #+end_src

     #+begin_src scheme :noweb yes :results value
       <<attribute_list>>
(attrlist 0 4 (list))
     #+end_src

     #+RESULTS:
     | b1 | b2 | b3 | b4 |

***** single values for attribute lists
      Generate a list of increasing values, 0-lgth
      Call this function with (valuelist startndx length list-to-append-to) which generates a list of pairs (as strings): | 0, 0 | 1, 1 | 2, 2 | 3, 3 | 4, 4 | 5, 5 | 6, 6 | 7, 7 | 8, 8 | 9, 9 |
      #+name: single_value_list
      #+begin_src scheme :var lgth=10
      (define valuelist
	 (lambda (i n x)
	   (if (= i n)
	       x
	       (valuelist (+ i 1) n (append x (list (format #f "~d, ~d" i i)))))))
      #+end_src

      #+RESULTS: single_value_list

      Example call
      #+begin_src scheme :noweb yes
	<<single_value_list>>
	(valuelist 0 10 '())
      #+end_src

      #+RESULTS:
      | 0, 0 | 1, 1 | 2, 2 | 3, 3 | 4, 4 | 5, 5 | 6, 6 | 7, 7 | 8, 8 | 9, 9 |

***** value sequence
     The following function creates a sequence of Psecs with lgth number of items in the array. 

     Call with ~(make-pbind-array startndx lgth data list-to-append-to)~

     Parameters for repeats:
     - n: start index
     - lgth: the number of Pseqs, will never output more than there are data in the ~data~ var.
     - data: an array of sequences to be entered as the parameter value
     - x: the list to contain the result
     - func: the optional pbind function to use, defaults to "Pseq"

     #+name: value_sequence
     #+begin_src scheme :noweb yes :results value
       <<sequenced_array>>

       (define make-pbind-array-list
	 (lambda (n lgth data x . func)
	   (let ((mode (if (pair? func) (car func) "Pseq")))
	     (cond ((= n lgth) x)
		   ((= n (length data)) x)
		   ((make-pbind-array-list (+ n 1) lgth data
					   (append x (list
						      (format #f "~a([~{~a, ~}], inf)"
							      mode (list-ref data n)))) mode))))))

       (define make-pbind-array
	 (lambda (n lgth items x . pmode)
	   (let ((mode (if (pair? pmode) (car pmode) "Pseq")))
	     (if (= n lgth)
		 x
		 (make-pbind-array (+ n 1) lgth items
				   (append x (list
					      (format #f "~a([~{~a, ~}], ~a)"
						      mode (seq-array 0 items '()) "inf"))) mode)))))

       (define make-pbind-par-value
	 (lambda (n lgth data x . func)
	   (let ((mode (if (pair? func) (car func) "Pseq")))
	     (cond ((= n lgth) x)
		   ((= n (length data)) x)
		   ((make-pbind-par-value (+ n 1) lgth data
					   (append x (list (list mode (list-ref data n)))) mode))))))
     #+end_src

     Example call for ~value-sequence~ using ~make-pbind-array~ to generate 4 Pseq, each with a list of two members formatted as a Pbind routine. An optional fifth argument can be supplied with another Pattern sequence: ~(make-pbind-array 0 4 2 '() "Prand")~
     #+name: o_value_sequence
     #+begin_src scheme :noweb yes :results value
       <<value_sequence>>
       (make-pbind-array 0 1 2 '())
     #+end_src

     #+RESULTS: o_value_sequence
     | Pseq([0.0, 1.0, ], inf) |

     Example call for ~make-pbind-array-list~ generating 4 Pseq, each with a list taken from the members of the third argument. The fourt argument is the empty list in which the results are inserted. An optional fifth argument can be supplied with another Pattern sequence: ~(make-pbind-array-list 0 4 '('() '()) '() "Prand")~
     #+begin_src scheme :noweb yes :results value
       <<value_sequence>>
       (make-pbind-array-list 0 4 (make-list 4 (make-list 4 1)) '())
     #+end_src

     #+RESULTS:
     | Pseq([1, 1, 1, 1, ], inf) | Pseq([1, 1, 1, 1, ], inf) | Pseq([1, 1, 1, 1, ], inf) | Pseq([1, 1, 1, 1, ], inf) |

     Example call for ~make-pbind-par-value~ generating 4 Pseq, each with a list taken from the members of the third argument. The fourt argument is the empty list in which the results are inserted. An optional fifth argument can be supplied with another Pattern sequence: ~(make-pbind-par-value 0 4 '('() '()) '() "Prand")~
     #+begin_src scheme :noweb yes :results value
       <<value_sequence>>
       (make-pbind-par-value 0 4 (list (make-list 4 1) (make-list 4 0.5) (make-list 4 0.25) (make-list 4 0.125)) '() "Ppar")
     #+end_src

     #+RESULTS:
     | Pdar | (1 1 1 1)                 |
     | Pdar | (0.5 0.5 0.5 0.5)         |
     | Pdar | (0.25 0.25 0.25 0.25)     |
     | Pdar | (0.125 0.125 0.125 0.125) |

     #+begin_src scheme :noweb yes
<<value_sequence>>
(define (extract-parameter lst)
(car lst))

(define (extract-value lst)
(car (car lst)))

(define (moi x)
(cond ((list? x) 1)))

(moi (list 1 2 3))

(format #f "~a" (car (make-pbind-array-list 0 1 (make-shift-list 4 (select-seq-array 1 20 (list) 0) 1) '())))
     #+end_src

     #+RESULTS:

     Example call for a shifted list
     #+begin_src scheme :noweb yes
	 <<sequenced_array>>
	 <<shift_list>>
	 <<value_sequence>>
	 (make-pbind-array-list 0 4 (make-shift-list 4 (seq-array 0 3 (list)) 1) '())
     #+end_src

     #+RESULTS:
     | Pseq([0.0, 0.5, 1.0, ], inf) | Pseq([0.5, 1.0, 0.0, ], inf) | Pseq([1.0, 0.0, 0.5, ], inf) | Pseq([0.0, 0.5, 1.0, ], inf) |

     #+begin_src scheme :noweb yes
       <<value_sequence>>
       <<sequenced_array>>
       (make-pbind-array-list 0 4 (make-list 4 (seq-array 0 3 (list))) '())
     #+end_src

     #+RESULTS:
     | Pseq([0.0, 0.5, 1.0, ], inf) | Pseq([0.0, 0.5, 1.0, ], inf) | Pseq([0.0, 0.5, 1.0, ], inf) | Pseq([0.0, 0.5, 1.0, ], inf) |

***** list creation functions
     Use ~select-seq-array~ as a utility function to be able to select function programmatically. All seg-array-* are normalized.
     #+name: sequenced_array
     #+begin_src scheme
       (define pi 3.141592654)

       (define seq-array
	 (lambda (i n x)
	   (if (= i n)
	       x
	       (seq-array (+ i 1) n
			  (append x (list (/ i (- n 1.0))))))))

       (define seq-array-reciprocal
	 (lambda (i n x)
	   (if (= i n)
	       x
	       (seq-array-reciprocal (+ i 1) n
				     (append x (list
						(/ 1 (+ 1.0 i))))))))

       (define seq-array-exponential
	 (lambda (i n x)
	   (if (= i n)
	       x
	       (seq-array-exponential (+ i 1) n
				      (append x (list
						 (/ (expt 2 i) (expt 2 (- n 1.0)))))))))

       (define seq-array-log
	 (lambda (i n x)
	   (if (= i n)
	       x
	       (seq-array-log (+ i 1) n
			      (append x (list (/ (log (+ i 1)) (log n))))))))

       (define seq-array-sin
	 (lambda (i n x)
	   (if (= i n)
	       x
	       (seq-array-sin (+ i 1) n
			      (append x (list (sin (* (/ i n) pi))))))))

       (define seq-array-cos
	 (lambda (i n x)
	   (if (= i n)
	       x
	       (seq-array-cos (+ i 1) n
			      (append x (list (cos (* (/ i n) (/ pi 2)))))))))

       (define select-seq-array
	 (lambda (i n x j)
	   (cond ((= j 0) (seq-array i n x))
		 ((= j 1) (seq-array-reciprocal i n x))
		 ((= j 2) (seq-array-exponential i n x))
		 ((= j 3) (seq-array-log i n x))
		 ((= j 4) (seq-array-sin i n x))
		 ((= j 5) (seq-array-cos i n x)))))
       (select-seq-array 0 9 '() 0)
     #+end_src

     #+RESULTS: sequenced_array
     | 0.0 | 0.125 | 0.25 | 0.375 | 0.5 | 0.625 | 0.75 | 0.875 | 1.0 |

    value_sequence example call for the ~seq-array~ function, creating a list of sequence arrays:
     #+begin_src scheme :noweb yes
       <<sequenced_array>>
       (seq-array-sin 0 8 (list))
     #+end_src

     #+RESULTS:
     | 0.0 | 0.3826834324124625 | 0.7071067812590626 | 0.923879532570154 | 1.0 | 0.9238795324131747 | 0.7071067809690025 | 0.38268343203348076 |

****** shift list
       Shift items in a list and resturn a list of lists, all items shifted by one.

       Functions:
       - duplicate-shift /rows list newlist/: take a list a duplicated it while shifting it one step to the right.
       - make-shift-list /rows list . flag/: utility function that calls duplicate-list. If ~flag~ is supplied with a value of 1 a non-shifted list is generated.
       #+name: shift_list
       #+begin_src scheme
	 (define duplicate-shift
	   (lambda (n lst newlst)
	     (cond ((= 0 n) newlst)
		   ((duplicate-shift (- n 1) 
				     (append (cdr lst) (list (car lst)))
				     (append newlst (list (append (cdr lst) (list (car lst))))))))))

	 (define make-shift-list
	   (lambda (rows lst . flag)
	     (let ((flag (if (pair? flag) (car flag) 0)))
	       (cond ((= flag 1) (duplicate-shift rows lst (list lst)))
		     ((= flag 0) (make-list rows lst))))))
       #+end_src

       Example use of [[*shift list][shift list]] using [[*value sequence][value sequence]]. The latter creates an array of numbers that is duplicated and shifted to the right
       #+begin_src scheme :noweb yes
	 <<sequenced_array>>
	 <<shift_list>>
	 (make-shift-list 5 (seq-array 0 3 (list)) 1)
       #+end_src

       #+RESULTS:
       | 0.0 | 0.5 | 1.0 |
       | 0.5 | 1.0 | 0.0 |
       | 1.0 | 0.0 | 0.5 |
       | 0.0 | 0.5 | 1.0 |
       | 0.5 | 1.0 | 0.0 |
       | 1.0 | 0.0 | 0.5 |

       Example use of shift list and sine mapping, not relying on ~value_sequence~.
       #+begin_src scheme :noweb yes
	 (define lst (iota 5))
	 <<shift_list>>
	 (duplicate-shift 3 (map (lambda (x) (sin (* 0.1 x))) lst) (list (list)))
       #+end_src

       #+RESULTS:
       |---------------------+---------------------+--------------------+---------------------+---------------------|
       | 0.09983341664682815 | 0.19866933079506122 | 0.2955202066613396 |  0.3894183423086505 |                 0.0 |
       | 0.19866933079506122 |  0.2955202066613396 | 0.3894183423086505 |                 0.0 | 0.09983341664682815 |
       |  0.2955202066613396 |  0.3894183423086505 |                0.0 | 0.09983341664682815 | 0.19866933079506122 |



****** unused
	 #+begin_src scheme
	   <<shift_list>>

	   (define seq-array
	     (lambda (i n x)
	       (if (= i n)
		   x
		   (seq-array (+ i 1) n
			      (append x (list
					 (/ 1 (+ 1.0 i))))))))

	   (define shifted-seq (duplicate-shift 10 (seq-array 0 10 (list)) (list (seq-array 0 10 (list)))))

	   (define repeats
	     (lambda (n lgth items x)
	       (if (= n items)
		   x
		   (repeats (+ n 1) lgth items
			    (append x (list
				       (format #f "Pseq([~{~a, ~}], inf)"
					       (list-ref shifted-seq n))))))))
	 #+end_src

	 Generate a list of increasing values, 0-lgth
	 #+name: value_list
	 #+begin_src scheme :var lgth=10
	 (define valuelist
	    (lambda (i n x)
	      (if (= i n)
		  x
		  (valuelist (+ i 1) n (append x (list (format #f "Pseq([~d], inf)" (+ i 1))))))))
	  (valuelist 0 lgth (list))
	 #+end_src

	 #+RESULTS: value_list
	 | Pseq([1], inf) | Pseq([2], inf) | Pseq([3], inf) | Pseq([4], inf) | Pseq([5], inf) | Pseq([6], inf) | Pseq([7], inf) | Pseq([8], inf) | Pseq([9], inf) | Pseq([10], inf) |

*** make p-arrays
**** repeat list for rhythmic patterns
     These are the definitions for a list creation call which will return a repeat list based on the input in ~source_list~. To be used for the \dur parameter in a Pbind. This functions returns a full EventList string.
     Functions:
     - pseries: function that prints out the items of a list in the context of a Pseq or similar.
     - repeat: Repeats items of a list
     Variables:
     - source_list: the source for the list manipulation.
     - reps: the number of repetitions for the original item, other items are repeated ~(* (/ 1 divisor) repeats)~
     - function: the Supercollider function to apply ("Pseq")
     - param: the parameter to address ("\dur")
      Call:
     ~(pseries (apply append (repeat reps source_list)) 0)~ 
     #+name: repeat_list
     #+begin_src scheme :results output :var s=(list 0.6 0.25) r=1 f="Pseq" p="\\dur"
       (define source_list (list 1 0.5 0.25 0.125 0.0625 0.03125 0.015625 0.0078125))
       (define reps 4)
       (define function "Pseq")
       (define param "\\dur")

       (define (pseries lst i)
	 (let ((max (length lst)))
	   (when (< i max)
	     (if (= i (- max 1))
		 (format #t "~a ], inf)" (list-ref lst i))
		 (format #t "~a, " (list-ref lst i)))
	     (pseries lst (1+ i)))))

       (define (repeat n lst)
	 (format #t "~a, ~a([" param function)
	 (map (lambda (x) (make-list (* (inexact->exact (floor (/ 1 x))) n) x)) lst))
     #+end_src

#+begin_src scheme :noweb yes :results output
  <<repeat_list>>
  (pseries (apply append (repeat reps source_list)) 0)
#+end_src

#+RESULTS:
: \dur, Pseq([1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.03125, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.015625, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125, 0.0078125 ], inf)



**** repeat list full
     This functions returns a full EventList string and is a slight variation of the above.
     Functions:
     - pseries: function that prints out the items of a list in the context of a Pseq or similar.
     - repeat: Repeats items of a list
     Variables:
     - source_list: the source for the list manipulation.
     - reps: the number of repetitions for the original item, other items are repeated ~(* (/ 1 divisor) repeats)~
     - function: the Supercollider function to apply ("Pseq")
     - param: the parameter to address ("\dur")
     #+name: repeat_list_full
     #+begin_src scheme :results output :var source_list=(list 0.5 0.25 0.125 0.0625) reps=4 function="Pseq" param="\\dur"
       (define (pseries lst i)
	 (let ((max (length lst)))
	   (when (< i max)
	     (if (= i (- max 1))
		 (format #t "~a ], inf)" (list-ref lst i))
		 (format #t "~a, " (list-ref lst i)))
	     (pseries lst (1+ i)))))

       (define (repeat n lst)
	 (map (lambda (x) (make-list (* (inexact->exact (floor (/ 1 x))) n) x)) lst))

       (format #t "~a, " param)
       (format #t "~a([" function)
       (pseries (apply append (repeat reps source_list)) 0)
     #+end_src

     #+RESULTS: repeat_list_full
     : ice-9/boot-9.scm:1669:16: In procedure raise-exception:
     : Unbound variable: function
     : 
     : Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
     : scheme@(guile-user) [1]> 

**** make p-function series
     These function all output a variety of P-functions that takes an array as first argument. The exact function to use is specified in the variable 'function'.
    
     Basic function to create a Prand with a list of numbers from 'start' to 'end'. This could equally well be injected in the template [[*sclang template][sclang template]]. Note that it is necessary to escape the backslash in the ~(format)~ function.
     Variables:
     - start:
     - end:
     - function: the Supercollider function to apply ("Pseq")
     - param: the parameter to address ("\dur")
     - multi: the multipler for the output 
     #+name: make_incr_pfunction
     #+begin_src scheme :results output :var start=0 end=20 function="Pseq" param="\\dur" multi=0.1
       (define (lp i max multiplier)
	 (when (< i max)
	   (let ((m (* (/ i max) multiplier)))
	     (if (= i (- max 1))
		 (format #t "~a ], inf)" m)
		 (format #t "~a, " (* (/ i 20.0) m))))
	   (lp (+ 1 i) max multiplier)))

       ;; output
       (format #t "~a, " param)
       (format #t "~a([" function)
       (lp start end multi)
     #+end_src

     #+RESULTS: make_incr_pfunction
     : \dur, Pseq([0.0, 2.5000000000000006e-4, 0.0010000000000000002, 0.00225, 0.004000000000000001, 0.00625, 0.009, 0.012249999999999999, 0.016000000000000004, 0.020250000000000004, 0.025, 0.030250000000000006, 0.036, 0.04225, 0.048999999999999995, 0.05625000000000001, 0.06400000000000002, 0.07225000000000001, 0.08100000000000002, 0.095 ], inf)

     Similar call to [[*make_pfunction][make_incr_pfunction]] but creating a Pseq instead.
     #+call: make_incr_pfunction(start=5, end=13, function="Pseq")

**** inject list
     Basic function to create a P-type function with a list of numbers supplied as the argument ~elements~. This could equally well be injected in the template [[*sclang template][sclang template]]. Note that it is necessary to escape the backslash in the ~(format)~ function. This calles ~repeat
     Variables:
     - function: the Supercollider function to apply ("Pseq")
     - param: the parameter to address ("\dur")
     #+name: format_list
     #+begin_src scheme :results output :noweb yes :var elements=(list 0.5 0.1 0.4 0.4) function="Pseq" param="\\dur"
       (define (pseries lst i)
	 (let ((max (length lst)))
	   (when (< i max)
	     (if (= i (- max 1))
		 (format #t "~a ], inf)" (list-ref lst i))
		 (format #t "~a, " (list-ref lst i)))
	     (pseries lst (1+ i)))))
       (format #t "~a, " param)
       (format #t "~a([" function)
       (pseries elements 0)
     #+end_src

     #+RESULTS: format_list
     : \dur, Pseq([0.5, 0.1, 0.4, 0.4 ], inf)

**** inject list, format\_list\_bare
     Basic function to create a P-type function with a list of numbers intended for inclusion via noweb, similar to [[*inject list][the one above]]. This could equally well be injected in the template [[*sclang template][sclang template]]. Note that it is necessary to escape the backslash in the ~(format)~ function. This calles ~repeat~. This is intended for use with the \dur parameter and outputs a complete Pbind

     Variables:
     - f(unction): the Supercollider function to apply ("Pseq")
     - p(aram): the parameter to address ("\dur")

     Call:
     ~(pseries (apply append (repeat 4 (select-seq-array 2 9 '() 0))) 0)~
     #+name: format_list_bare_pbind
     #+begin_src scheme :results output :noweb yes
       (define s ").play;")

       (format #t "~a(" "Pbind")
       <<format_list_bare>>
     #+end_src


     #+name: format_list_bare
     #+begin_src scheme :results output :noweb yes 
       (if (defined? 's) (set! s s) (define! s ""))

       (define (pseries lst i)
	 (let ((max (length lst)))
	   (when (< i max)
	     (if (= i (- max 1))
		 (format #t "~a ], inf)~a" (list-ref lst i) s)
		 (format #t "~a, " (list-ref lst i)))
	     (pseries lst (1+ i)))))
       (format #t "~a, " p)
       (format #t "~a([" f)
     #+end_src
     
     Example call for format_list_bare_pbind for a complete Pbind:
     #+begin_src scheme :noweb yes :results output :tangle hoho.scm
       (define f "Pseq")
       (define p "\\dur")
       <<format_list_bare_pbind>> 
       <<select_repeat_list>>
       (pseries (apply append (repeat 8 (select-seq-array 4 18 '() 0))) 0)
     #+end_src

     Example call for a format_list_bare for a Pseq
     #+begin_src scheme :noweb yes :results output :tangle
       (define f "Prand")
       (define p "\\flt")
       (define s "")
       <<format_list_bare>> 
       <<select_repeat_list>>
       (pseries (apply append (repeat 8 (select-seq-array 4 18 '() 0))) 0)
     #+end_src

     : \flt, Prand([0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.23529411764705882, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.29411764705882354, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.4117647058823529, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.47058823529411764, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5294117647058824, 0.5882352941176471, 0.5882352941176471, 0.5882352941176471, 0.5882352941176471, 0.5882352941176471, 0.5882352941176471, 0.5882352941176471, 0.5882352941176471, 0.6470588235294118, 0.6470588235294118, 0.6470588235294118, 0.6470588235294118, 0.6470588235294118, 0.6470588235294118, 0.6470588235294118, 0.6470588235294118, 0.7058823529411765, 0.7058823529411765, 0.7058823529411765, 0.7058823529411765, 0.7058823529411765, 0.7058823529411765, 0.7058823529411765, 0.7058823529411765, 0.7647058823529411, 0.7647058823529411, 0.7647058823529411, 0.7647058823529411, 0.7647058823529411, 0.7647058823529411, 0.7647058823529411, 0.7647058823529411, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8235294117647058, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.8823529411764706, 0.9411764705882353, 0.9411764705882353, 0.9411764705882353, 0.9411764705882353, 0.9411764705882353, 0.9411764705882353, 0.9411764705882353, 0.9411764705882353, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ], inf)
     #+RESULTS:

*** make lists
**** multiply
     Multiply each item in the list with ~mult~
     #+name: list_multiplier
     #+begin_src scheme :var lst=incrementing_list(lgth=31) mult=0.01
       (map (lambda (x) (* x 2)) lst)
     #+end_src

     #+RESULTS: list_multiplier
     | 0 | 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 | 22 | 24 | 26 | 28 | 30 | 32 | 34 | 36 | 38 | 40 | 42 | 44 | 46 | 48 | 50 | 52 | 54 | 56 | 58 | 60 |

**** multiply->sin
     #+name: list_multiplier_sin
     #+begin_src scheme :var lst=incrementing_list(lgth=31) mult=200 add=100
       (map (lambda (x) (+ add (* mult (sin x))))
	    (map (lambda (x) (* x 0.1)) lst))
     #+end_src

     #+RESULTS: list_multiplier_sin
     | 100.0 | 119.96668332936562 | 139.73386615901225 | 159.1040413322679 | 177.8836684617301 | 195.8851077208406 | 212.9284946790071 | 228.84353744753824 | 243.47121817990455 | 256.66538192549666 | 268.2941969615793 | 278.2414720122871 | 286.4078171934453 | 292.71163708343863 | 297.08994599769204 | 299.4989973208109 | 299.914720608301 | 298.3329620904937 | 294.76952617563904 | 289.2600175374829 | 281.8594853651364 | 272.64187332977474 | 261.699280763918 | 249.14104243534402 | 235.09263611023013 | 219.6944288207913 | 203.10027436429283 | 185.47597604676594 | 166.99763003118093 | 147.8498658427964 | 128.22400161197345 |

**** sin function
     Run each item of the list through a sin function.
     #+name: list_sin
     #+begin_src scheme :var lst=incrementing_list[:var lgth=20]() add=2 mult=0.2
       (map (lambda (x) (* (+ (sin x) add) mult)) lst)
     #+end_src

     #+RESULTS: list_sin
     | 0.4 | 0.5682941969615793 | 0.5818594853651364 | 0.4282240016119735 | 0.24863950093841436 | 0.2082151450673723 | 0.34411690036021486 | 0.5313973197437578 | 0.5978716493246764 | 0.4824236970483513 | 0.291195777822126 | 0.2000019586898593 | 0.292685416399913 | 0.48403340736532824 | 0.5981214711389741 | 0.5300575680314233 | 0.342419336666987 | 0.20772050162408862 | 0.2498025506456648 | 0.4299754419325905 |

   #+call: list_sin[:var lgth=4]()

**** incrementing
     #+name: incrementing_list
     #+begin_src scheme :var lgth=20
       (define incrementing-list
	 (lambda (n x)
	   (if (= n lgth)
	       x
	       (incrementing-list (+ n 1) (append x (list n))))))
       (incrementing-list 0 '())
     #+end_src

     #+RESULTS: incrementing_list
     | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 |

**** proof
     Make a simple call to the function above (noweb in scheme does not appear to be working).
     #+begin_src scheme :noweb yes :results value code :var t=make_incr_pfunction()
       t
     #+end_src

     #+RESULTS:
     #+BEGIN_SRC scheme
     \dur, Pseq([0.0, 2.5000000000000006e-4, 0.0010000000000000002, 0.00225, 0.004000000000000001, 0.00625, 0.009, 0.012249999999999999, 0.016000000000000004, 0.020250000000000004, 0.025, 0.030250000000000006, 0.036, 0.04225, 0.048999999999999995, 0.05625000000000001, 0.06400000000000002, 0.07225000000000001, 0.08100000000000002, 0.095 ], inf)
     #+END_SRC

**** list creation
    #+name: my_source
    #+begin_src scheme :var repeats=10 exp=2 base=2
      (append (append (make-list repeats (expt base exp)) (make-list repeats (expt (+ base 1) exp))) (make-list repeats (expt (+ base 2)  exp)))
    #+end_src

    #+RESULTS: my_source
    | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 4 | 9 | 9 | 9 | 9 | 9 | 9 | 9 | 9 | 9 | 9 | 16 | 16 | 16 | 16 | 16 | 16 | 16 | 16 | 16 | 16 |

**** simple repeat list
   Take a list ~lst~ and repeat each item ~n~ times.
   Variables:
   - source_list: the source for the list manipulation.
   - reps: the number of repetitions for the original item, other items are repeated ~(* (/ 1 divisor) repeats)~
   #+name: simple_repeat_list
   #+begin_src scheme :results value :var source_list=(list 1 0.125 0.25 0.375) reps=2
     (define (repeat n lst)
       (map (lambda (x) (make-list (* (inexact->exact (floor (/ 1 x))) n) x)) lst))

     (apply append (repeat reps source_list))
   #+end_src

   #+RESULTS: simple_repeat_list

   Use the output from one of the ~select-seq-array~ and repeat each item by the reciprocal of x multiplied by ~n~.
Call: ~(apply append (repeat 4 (select-seq-array 5 20 '() 0)))~
   #+name: select_repeat_list
   #+begin_src scheme :noweb yes
     <<sequenced_array>>
     (define (repeat n lst)
       (map (lambda (x) 
	      (if (= x 0)
		  (set! x 1))
	      (make-list (* (inexact->exact (floor (/ 1 x))) n) x)) lst))
   #+end_src

   Example call for select_repeat_list.
   #+begin_src scheme :noweb yes
     <<select_repeat_list>>
     (apply append (repeat 4 (select-seq-array 2 9 '() 0)))
   #+end_src

   #+RESULTS:
   | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.25 | 0.375 | 0.375 | 0.375 | 0.375 | 0.375 | 0.375 | 0.375 | 0.375 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.625 | 0.625 | 0.625 | 0.625 | 0.75 | 0.75 | 0.75 | 0.75 | 0.875 | 0.875 | 0.875 | 0.875 | 1.0 | 1.0 | 1.0 | 1.0 |

**** make pan arrays

     #+begin_src scheme :noweb yes
       <<sequenced_array>>
       (seq-array-sin 0 8 (list))
     #+end_src

     #+RESULTS:
     | 0.0 | 0.3826834324124625 | 0.7071067812590626 | 0.923879532570154 | 1.0 | 0.9238795324131747 | 0.7071067809690025 | 0.38268343203348076 |


     #+begin_src scheme
       (define valuelist
	  (lambda (i n x)
	    (if (= i n)
		x
		(valuelist (+ i 1) n (append x (list (format #f "Pseq([~d], inf)" (+ i 1))))))))
	(valuelist 0 4 (seq-array-sin 0 8 (list)))
     #+end_src

     #+RESULTS:

     #+begin_src scheme :var mult=0.01 :noweb yes :results output
		     <<sequenced_array>>
		     (map (lambda (x)
			    (format #t "~a, " (truncate (* x 14))))
			  (seq-array-sin 0 21 (list)))
     #+end_src

     #+RESULTS:
     : 0.0, 2.0, 4.0, 6.0, 7.0, 9.0, 10.0, 12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 

     #+begin_src scheme
       (seq-array-sin 0 8 (list))
     #+end_src

     #+RESULTS:
