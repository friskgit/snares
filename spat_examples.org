* Spatialisation in SC
** Setup
*** boot
    #+name: boot_jack
    #+begin_src sclang :results none
      (
      o = Server.local.options; // Get the local server's options
      o.numOutputBusChannels = 64;
      o.numWireBufs = 128;
      o.memSize = 65536;
      //     s.makeWindow;
      s.makeGui(p);
      s.boot;
      )
    #+end_src
*** meter
    #+name: sc_meter
    #+begin_src sclang :results none
      s.meter;
    #+end_src
   
*** jconvolver
    Remember to load the library ob-async prior to testing these:

    M-x load-library ob-async
    #+begin_src emacs-lisp :results silent
      (load-library "ob-async")
    #+end_src
    
    To start jconvolver:
    #+name: jconvolver
    #+begin_src shell :dir /home/henrikfr/Music/spatialization/klangkupolen/gerhard/convolution_config/kmh_lilla_salen_29 :async :results silent
      echo "Starting up jconvolver"
      jconvolver KMH_LILLA_SALEN.conf &
    #+end_src

    Connect to SC to Jack over Jconvolver
    #+begin_src shell :results silent
      jcon Collider:out 1 volver:in 1 29
      jcon jconvolver 1 playback 1 2
    #+end_src

    Connect output to system
    #+begin_src shell :results silent
      jcon jconvolver 1 playback 1 2
    #+end_src

    Disconnect everything
    #+begin_src shell :results silent
      jdis -d Super 1 jconvolver 1 29
    #+end_src

    Disconnect supercollider from main out$
    #+begin_src shell
      for i in {1..4}; do
	  jdis -d Super _$i system $i
      done
    #+end_src

    #+RESULTS:
    | Disconnecting | port | SuperCollider:out_1 | from | system:playback_1 |
    | Disconnecting | port | SuperCollider:out_2 | from | system:playback_2 |
    | Disconnecting | port | SuperCollider:out_3 | from | system:playback_3 |
    | Disconnecting | port | SuperCollider:out_4 | from | system:playback_4 |

*** messaging
    [[https://doc.sccode.org/Guides/Debugging-tips.html][See here for documentation.]]
    
    SendTrig is originally intended to send a trigger message back to the client, so the client can take further action on the server. However, it can be used to send any numeric value back to the client, which can then be printed out.

    To print out the values, you need to create an OSCFunc as follows:
    #+name: osc_print
    #+begin_src sclang :results none
      o = OSCFunc({ |msg| msg.postln }, '/msg', s.addr);
    #+end_src

    Then the message can be triggered as follows:
    #+begin_src sclang :results none
      SendTrig.kr(Impulse.kr(4), 0, freq);
      #+end_src
** Synth
*** synth
    Make a simple snare for testing
    #+name: original_snare
    #+begin_src sclang :results none
      (
      ~snareSimple = SynthDef(\snare, {
	  var snd;
	  var env = Env([0, 1, 0], [0.0001, \length.ir(0.5)]);
	  var imp = Impulse.ar(\impf.ir(1), 0.0, 0.5, 0);
	  var frq1=\freq.kr(300), frq2=frq1-100;
	  snd = OGenericSnarefs.ar(imp, 0.00001, 0.001, \noiselvl.kr(0.1), \nrel.ir(0.1), frq1, frq2, \rel.ir(0.1), \trifrq.kr(111)) * EnvGen.kr(env, doneAction: Done.freeSelf);
	  Out.ar(\out.kr(0), snd*\gain.ir(1));
      }).add;
      )
    #+end_src

    Play one hit on the snare above.
      #+name: reg_snare_load
      #+begin_src sclang :results none
	~regSnare = Synth.new("snare", [\freq, 800, \out, 33, \gain, 1, \vol, 5] );
      #+end_src

      #+begin_src sclang :noweb yes
	<<reg_snare_load>>
	<<sc_meter>>
	#+end_src      

      Regular hits
      #+name: play
      #+begin_src sclang :results none :noweb yes
	~signalBus = 33;
	~simplePlayer = Pbind(*[
		instrument: \snare,
		freq: 65,
		out: ~signalBus,
		gain: 0.1,
		vol: 0.5,
		dur: 0.85
	]);
	~simplePlayer.play;
	~newSimplePlayer = Pbind(*[
		instrument: \snare,
		freq: 60,
		out: 34,
		gain: 1,
		vol: 0.5,
		dur: 2
	]);
	~newSimplePlayer.play;
	~simplePlayer3 = Pbind(*[
		instrument: \snare,
		freq: 50,
		out: 35,
		gain: 0.2,
		vol: 0.5,
		dur: 0.3
	]);
	~simplePlayer3.play;
      #+end_src

            Regular hits
      #+name: play
      #+begin_src sclang :results none :noweb yes
	~signalBus = 33;
	~simplePlayer = Pbind(*[
		instrument: \snare,
		freq: 900,
		out: ~signalBus,
		gain: 0.1,
		vol: 0.1,
		dur: 0.03
	]);
	~simplePlayer.play;
	~newSimplePlayer = Pbind(*[
		instrument: \snare,
		freq: 600,
		out: 34,
		gain: 0.1,
		vol: 0.1,
		dur: 0.02
	]);
	~newSimplePlayer.play;
	~simplePlayer3 = Pbind(*[
		instrument: \snare,
		freq: 1200,
		out: 35,
		gain: 0.1,
		vol: 0.1,
		dur: 0.01
	]);
	~simplePlayer3.play;
      #+end_src
      
      Regular hits
      #+name: play
      #+begin_src sclang :results none :noweb yes
	~signalBus = 33;
	~simplePlayer = Pbind(*[
		instrument: \snare,
		freq: 140,
		out: ~signalBus,
		gain: 1,
		vol: 0.5,
		dur: 5
	]);
	~simplePlayer.play;
	~newSimplePlayer = Pbind(*[
		instrument: \snare,
		freq: 60,
		out: 34,
		gain: 1,
		vol: 0.5,
		dur: 5
	]);
	~newSimplePlayer.play;
	~simplePlayer3 = Pbind(*[
		instrument: \snare,
		freq: 120,
		out: 35,
		gain: 1,
		vol: 0.5,
		dur: 5
	]);
	~simplePlayer3.play;
      #+end_src
      #+begin_src sclang :results none
	s.meter;
      #+end_src
      
      #+name: stop
      #+begin_src sclang :results none
	~simplePlayer.stop;
      #+end_src
*** record
   #+name: record_me
   #+begin_src sclang :results none
     s.prepareForRecord("~/Music/single2.wav", numChannels: 29);
     s.record;
   #+end_src
** VBAP
*** Simple example
    #+begin_src sclang :results none
      Server.default = s = Server.internal;
      // 2D
      // 8 channel ring
      z = VBAPSpeakerArray.new(2, [0, 45, 90, 135, 180, -135, -90, -45]); 
      a.speakers[1].dump;
      b = a.loadToBuffer;
    #+end_src

*** Lilla salen
    The angles for lilla salen:

    First ring:
    -29.527912, -7.3468173, 13.114117, 37.61095, 57.425943, 77.592581, 101.33475, 122.88658, 150.42812, 171.99527, -166.29899, -146.27587, -121.54205, -100.49606, -77.634157, -52.538058,

    Second ring:
    -22.349553, 30.735488, 69.013292, 115.56544, 158.89992, -154.80665, -121.42252, -65.382121,

    Third ring:
    -45, 45, 135, -135, 0

**** 2D example
     2D example for lilla salen
     #+begin_src sclang :results none
       a = VBAPSpeakerArray.new(2, [-29.527912, -7.3468173, 13.114117, 37.61095, 57.425943, 77.592581, 101.33475, 122.88658, 150.42812, 171.99527, -166.29899, -146.27587, -121.54205, -100.49606, -77.634157, -52.538058]);

       a.speakers[1].dump;
       b = a.loadToBuffer;
     #+end_src

     Pan a signal
     #+begin_src sclang :results none
       (
       ~panVBAP = { |azi = 0, ele = 0, spr = 0|
	       VBAP.ar(16, In.ar(33,1), b.bufnum, azi, ele, spr);
       }.scope;
       )
     #+end_src

     #+begin_src sclang :results none
       ~panVBAP.set(\azi, 90);
     #+end_src     
**** 2D GUI
     #+begin_src sclang :results none
       (
       var aNumb, eNumb, sNumb, aSlid, eSlid, sSlid;
       ~guiWindowVBAP = Window.new.front;

       aNumb = NumberBox(~guiWindowVBAP, Rect(20, 20, 70, 20));
       aSlid = Slider(~guiWindowVBAP, Rect(20, 60, 20, 150)).action_({
	       aNumb.value_(aSlid.value);
	       ~panVBAP.set(\azi, aSlid.value * 360);
       });
       aSlid.action.value;

       eNumb = NumberBox(~guiWindowVBAP, Rect(90, 20, 70, 20));
       eSlid = Slider(~guiWindowVBAP, Rect(90, 60, 20, 150)).action_({
	       eNumb.value_(eSlid.value);
	       ~panVBAP.set(\ele, eSlid.value * 180 - 90);
       });
       eSlid.action.value;

       sNumb = NumberBox(~guiWindowVBAP, Rect(160, 20, 70, 20));
       sSlid = Slider(~guiWindowVBAP, Rect(160, 60, 20, 150)).action_({
	       sNumb.value_(sSlid.value);
	       ~panVBAP.set(\spr, sSlid.value * 180);
       });
       sSlid.action.value;
       )
     #+end_src
**** 3D example
     #+begin_src sclang :results none
       a = VBAPSpeakerArray.new(3, [[ -34.689614 , 12.910417 ], [ -13.383763 , 12.910417 ], [ 10.440725 , 12.910417 ], [ 32.117788 , 12.910417 ], [ 55.741675 , 12.910417 ], [ 78.207673 , 12.910417 ], [ 101.49442 , 12.910417 ], [ 124.85167 , 12.910417 ], [ 147.91193 , 12.910417 ], [ 169.17789 , 12.910417 ], [ -167.82013 , 12.910417 ],
	       [ -145.63454 , 12.910417 ], [ -123.784 , 12.910417 ], [ -102.64182 , 12.910417 ], [ -79.887731 , 12.910417 ], [ -57.926139 , 12.910417 ],
	       [ -22.349553 , 34.696822 ], [ 22.843958 , 34.696822 ], [ 69.013292 , 34.696822 ], [ 115.56544 , 34.696822 ], [ 158.89992 , 34.696822 ], [ -158.89763 , 34.696822 ], [ -114.65354 , 34.696822 ], [ -68.170128 , 34.696822 ],
	       [ -45 , 69.185799 ], [ 45 , 69.185799 ], [ 135 , 69.185799 ], [ -135 , 69.185799 ], [ 0 , 90 ]]);
       a.speakers[1].dump;
       b = Buffer.loadCollection(s, a.getSetsAndMatrices);
     #+end_src

     Circle panning up and down
     #+begin_src sclang :results none
       (
       x = { |azi = 0, ele = 0, spr = 0|
	       var source;
	       source = In.ar(33);
	       if(114){	       VBAP.ar(16, source, c.bufnum, LFSaw.kr(0.5, 0).range(-180, 180) * -1, SinOsc.kr(3, 0).range(0, 14.97), spr);},
	{
	       VBAP.ar(29, source, b.bufnum, LFSaw.kr(0.5, 0).range(-180, 180) * -1, SinOsc.kr(3, 0).range(0, 14.97), spr);};

       }.play;
       )
     #+end_src

     Multi panning
     #+begin_src sclang :results none
       (
       ~panVBAP3Dspread1 = { arg s1 = 0, f1 = 2;
	       VBAP.ar(29, In.ar(33), b.bufnum, LFSaw.kr(f1, 0).range(-180, 180) * -1, 0, s1);
       }.play;

       ~panVBAP3Dspread2 = {  arg s1 = 0, f1 = 5;
	       VBAP.ar(29, In.ar(34), b.bufnum, LFSaw.kr(f1, 0).range(-180, 180) * -1, 0, s1);
       }.play;

       ~panVBAP3Dspread3 = {  arg s1 = 0, f1 = 10;
	       VBAP.ar(29, In.ar(35), b.bufnum, LFSaw.kr(f1, 0).range(-180, 180) * -1, 0, s1);
       }.play;
       )
     #+end_src
     
     General, manual panning object
     #+begin_src sclang :results none
       ~panVBAP3D = { arg azi=0, ele=0, spr=0, in=33;
	       VBAP.ar(29, In.ar(in), b.bufnum, azi, ele, spr);
       }.play;
     #+end_src

     #+begin_src sclang :noweb yes
	<<play>>
     #+end_src      
**** 3D GUI aes 
     #+begin_src sclang :results none
       (
       var aNumb, eNumb, sNumb, aSlid, eSlid, sSlid;
       ~guiWindowVBAP = Window.new.front;

       aNumb = NumberBox(~guiWindowVBAP, Rect(20, 20, 70, 20));
       aSlid = Slider(~guiWindowVBAP, Rect(20, 60, 20, 150)).action_({
	       aNumb.value_(aSlid.value);
	       ~panVBAP3D.set(\azi, aSlid.value * 360);
       });
       aSlid.action.value;

       eNumb = NumberBox(~guiWindowVBAP, Rect(90, 20, 70, 20));
       eSlid = Slider(~guiWindowVBAP, Rect(90, 60, 20, 150)).action_({
	       eNumb.value_(eSlid.value);
	       ~panVBAP3D.set(\ele, eSlid.value * 180 - 90);
       });
       eSlid.action.value;

       sNumb = NumberBox(~guiWindowVBAP, Rect(160, 20, 70, 20));
       sSlid = Slider(~guiWindowVBAP, Rect(160, 60, 20, 150)).action_({
	       sNumb.value_(sSlid.value);
	       ~panVBAP3D.set(\spr, sSlid.value * 180);
       });
       sSlid.action.value;
       )
     #+end_src
**** 3D GUI 3 x spread 
     #+begin_src sclang :results none
       (
       var aNumb, eNumb, sNumb, aSlid, eSlid, sSlid, aaNumb, eeNumb, ssNumb, aaSlid, eeSlid, ssSlid;
       ~guiWindowVBAP = Window.new.front;

       aNumb = NumberBox(~guiWindowVBAP, Rect(20, 20, 70, 20));
       aSlid = Slider(~guiWindowVBAP, Rect(20, 60, 20, 150)).action_({
	       aNumb.value_(aSlid.value);
	       ~panVBAP3Dspread1.set(\s1, aSlid.value * 180);
       });
       aSlid.action.value;

       eNumb = NumberBox(~guiWindowVBAP, Rect(90, 20, 70, 20));
       eSlid = Slider(~guiWindowVBAP, Rect(90, 60, 20, 150)).action_({
	       eNumb.value_(eSlid.value);
	       ~panVBAP3Dspread2.set(\s1, eSlid.value * 180);
       });
       eSlid.action.value;

       sNumb = NumberBox(~guiWindowVBAP, Rect(160, 20, 70, 20));
       sSlid = Slider(~guiWindowVBAP, Rect(160, 60, 20, 150)).action_({
	       sNumb.value_(sSlid.value);
	       ~panVBAP3Dspread3.set(\s1, sSlid.value * 180);
       });
       sSlid.action.value;

       aaNumb = NumberBox(~guiWindowVBAP, Rect(230, 20, 70, 20));
       aaSlid = Slider(~guiWindowVBAP, Rect(230, 60, 20, 150)).action_({
	       aaNumb.value_(aaSlid.value);
	       ~panVBAP3Dspread1.set(\f1, aaSlid.value * 10);
       });
       aaSlid.action.value;

       eeNumb = NumberBox(~guiWindowVBAP, Rect(300, 20, 70, 20));
       eeSlid = Slider(~guiWindowVBAP, Rect(300, 60, 20, 150)).action_({
	       eeNumb.value_(eeSlid.value);
	       ~panVBAP3Dspread2.set(\f1, eeSlid.value * 10);
       });
       eeSlid.action.value;

       ssNumb = NumberBox(~guiWindowVBAP, Rect(370, 20, 70, 20));
       ssSlid = Slider(~guiWindowVBAP, Rect(370, 60, 20, 150)).action_({
	       ssNumb.value_(ssSlid.value);
	       ~panVBAP3Dspread3.set(\f1, ssSlid.value * 10);
       });
       ssSlid.action.value;
       )
     #+end_src

** Ambisonics
*** ambi with control
    Working example with azimuth and elevation panning.
    
      Start server
      #+call: boot_jack()
      Load SynthDef
      #+call: original_snare()
      Start the encoder
      #+call: scl_encode()
      Start the player
      #+call: play()
      Load the panning GUIle
      #+call: load_window()
      #+call: sliders()
      Connect the encoder with the decoder
      #+call: scl_connect()
      Free stuff
      #+call: free_instances()

      Set the environment variables, then, create the encoder and the decoder.
      #+name: scl_encode
      #+begin_src sclang :results none :noweb yes
	(
	// Settings
	var trig;

	~signalBus = 33;
	~order = 3;
	~binaural = 1;
	~hoaNumChannels = (~order+1).pow(2);
	~decoderNumChannels = 29;
	//s.scope(~hoaNumChannels);

	// Create the input bus and the encoder
	~hoaSignal = NodeProxy.new(s, \audio, ~hoaNumChannels);
	//~hoaSignal.play;

	// hoaSignal.source och hoaSignal.add verkar fungera lika bra.
	~hoaSignal[0] = {
		HOAEncoder.ar(~order,
			In.ar(~signalBus),
			\azpana.kr(-3.14),
			\elpana.kr(0),
			\gaina.kr(0),
			\planespherical.kr(1),
			\rada.kr(2),
			\speakerrad.ir(1.07))
	};
	~hoaSignal[1] = {
		HOAEncoder.ar(~order,
			In.ar(~signalBus),
			\azpanb.kr(-3.14),
			\elpanb.kr(0),
			\gainb.kr(0),
			\planespherical.kr(1),
			\radb.kr(2),
			\speakerrad.ir(1.07)) };
	~hoaSignal.fadeTime = 0.1;

	/* Create windows for panning */
	~windows = Environment(know: true);

	// With phasor
	// trig = Impulse.kr(0.001);
	//~azimuthA.source = { LinLin.kr(Phasor.kr(Impulse.kr(0.5), 0.5/ControlRate.ir), 0, 1, 0, 360); };

	// Load the decoder:
	~decoder = NodeProxy.new(s, \audio, ~decoderNumChannels);
	~decoder.fadeTime = 1;
	if(~binaural == 0,
		//////////////////
		/* If decoded */
		{
			if(~order == 1, {
				"First order".postln;	
				~decoder.source = {
					var in; in = \in.ar(0!~hoaNumChannels);
					in.add(-10);
					KMHLSDome1h1pNormal6.ar(*in);
				};
			});
			if(~order == 3, {
				"Third order".postln;
				~decoder.source = {
					var in; in = \in.ar(0!~hoaNumChannels);
					in.add(-10);
					KMHLSDome3h3pNormal6.ar(*in);
				};
			});
			if(~order == 5, {
				"Fifth order".postln;
				~decoder.source = {
					var in; in = \in.ar(0!~hoaNumChannels);
					in.add(-10);
					KMHLSDome5h5pNormal6.ar(*in);
				};
			});
			//////////////////
			/* If binaural */
		}, {
			"Binaural version".postln;
			HOADecLebedev26.loadHrirFilters (
				s,
				"/home/henrikfr/Dropbox/Music/faust/ambi/ambitools/FIR/hrir/hrir_christophe_lebedev50"
			);
			if(~order == 1, {
				~decoder.source = {
					var in; in = \in.ar(0!~hoaNumChannels);
					HOADecLebedev06.ar(~order.asInteger, in, hrir_Filters:1)
				};
			});
			/* 3 and 5 are actually the same */
			if(~order == 3, {
				~decoder.source = {
					var in; in = \in.ar(0!~hoaNumChannels);
					HOADecLebedev26.ar(~order.asInteger, in, hrir_Filters:1)
				};
			});
			/* 3 and 5 are actually the same */
			if(~order == 5, {
				~decoder.source = {
					var in; in = in.ar(0!~hoaNumChannels);
					HOADecLebedev26.ar(~order.asInteger, in, hrir_Filters:1)
				};
			});
		});
	)
      #+end_src

      Generic window to be filled with content
      #+name: load_window
      #+begin_src sclang :results none :noweb yes
	<<gui_object>>
	~guiWindow = Window.new.front;
      #+end_src

      The gui object for panning
      #+name: gui_object
      #+begin_src sclang :results none :noweb yes :tangle test.sc
	~addGuiElements = { arg window, name = "default", offset = 0, multi = pi, xParam = \azpana, yParam = \elpana, zParam = \rada;
		var text, dNum, eNum, fNum, aSlid, bSlid, cSlid, csX, csY, csZ;

		text = StaticText(window, Rect(20+offset, 20, 200, 20));
		dNum = NumberBox(window, Rect(20+offset, 50, 50, 20));
		eNum = NumberBox(window, Rect(80+offset, 50, 50, 20));
		fNum = NumberBox(window, Rect(140+offset, 50, 50, 20));
		aSlid = Slider(window, Rect(40+offset, 90, 150, 20));
		bSlid = Slider(window, Rect(20+offset, 90, 20, 150));
		cSlid = Slider(window, Rect(40+offset, 220, 150, 20));
		text.string = name;
		csX = ControlSpec(-pi, pi, \linear, 0.001, 0);
		csY = ControlSpec(-pi/2, pi/2, \linear, 0.001, 0);
		csZ = ControlSpec(0.01, 20, \linear, 0.01, 1);

		aSlid.valueAction = 0.5;
		bSlid.value_(0.5);

		aSlid.action_({
			dNum.value_(csX.map(aSlid.value));
			~hoaSignal.set(xParam, (csX.map(aSlid.value)));
		});
		// Setting vertical panning via interface:
		bSlid.action_({
			eNum.value_(csY.map(bSlid.value));
			~hoaSignal.set(yParam, (csY.map(bSlid.value)));
		});
		// Setting vertical panning via interface:
		cSlid.action_({
			fNum.value_(csZ.map(cSlid.value));
			~hoaSignal.set(zParam, (csZ.map(cSlid.value)));
		});
		(
			sliderA: aSlid,
			sliderB: bSlid,
			set_value: { |self, val|
				self.sliderA.value_(val);
			},
		)
	};
      #+end_src
      
      Add window elements
      #+name: sliders
      #+begin_src sclang :results none
	~windOne = ~addGuiElements.value(~guiWindow, "HOAEncoder 1", 0);
	~windTwo = ~addGuiElements.value(~guiWindow, "HOAEncoder 2", 200, pi, \azpanb, \elpanb, \radb);
	#+end_src

      #+begin_src sclang :results none
	~windOne.set_value(1);
	~windTwo.set_value(1);
      #+end_src
      Binaural rendering, see files here:
      [[file:~/Dropbox/Music/faust/ambi/ambitools/FIR/hrir/hrir_christophe_lebedev50][file:~/Dropbox/Music/faust/ambi/ambitools/FIR/hrir/hrir_christophe_lebedev50]]
      #+begin_src sclang :results none
	(
	// s.scope(~hoaNumChannels); 

	HOADecLebedev26.loadHrirFilters(
	    s,
		"/home/henrikfr/Dropbox/Music/faust/ambi/ambitools/FIR/hrir/hrir_christophe_lebedev50"
	);

	~decoderSynth = {
	    Out.ar(0, HOADecLebedev26.ar(~order.asInteger, In.ar(30, ~hoaNumChannels.asInteger), hrir_Filters:1))
	}.play;
	)
     #+end_src
      
      Signal, encoded and decoded, but not mapped. Use this.
      #+name: scl_connect
      #+begin_src sclang :results none
	~decoder.play(0, ~decoderNumChannels, vol: 1.0);
	~hoaSignal <>> ~decoder;
      #+end_src
      
      Clear the instances
      #+name: free_instances
      #+begin_src sclang :results none
	~hoaSignal.clear;
	~decoder.clear;
      #+end_src

      #+begin_src sclang :results none
w = Window.new("GUI Introduction").layout_(
    VLayout(
        HLayout( Button(), TextField(), Button() ),
        TextView()
    )
).front;
      #+end_src

      #+begin_src sclang :results none
(
w = Window("Slider2D", Rect(100, 100, 140, 140));
t = Slider2D(w, Rect(20, 20, 80, 80))
        .x_(0.5) // initial location of x
        .y_(1)   // initial location of y
        .action_({|sl|
            [\sliderX, sl.x, \sliderY, sl.y].postln;
        });
w.front;
)
      #+end_src

*** efficient binaural example
    Settings
    #+begin_src sclang :results none
      (
      s.scope(40);
      Buffer.freeAll;
      HOABinaural.loadbinauralIRs(s);
      HOABinaural.loadHeadphoneCorrections(s);
      HOABinaural.binauralIRs;
      HOABinaural.headPhoneIRs;

      HOABinaural.listHeadphones;

      ~headphoneModel = nil;

      // set to nil if you want no correction
      //~headphoneModel = nil;
      )
    #+end_src

      Initilaize the binaural decoder and feed it with 3 noise sources
      #+begin_src sclang :results none
	(
	{OffsetOut.ar(0, HOABinaural.ar(5, In.ar(2, 36), headphoneCorrection:~headphoneModel) * 1 )}.play;

	{ Out.ar(2, HOAEncoder.ar(5, PinkNoise.ar(0.1),
		SinOsc.ar(0.1, 0, pi * 0.999 ),
		SinOsc.ar(0.2, 0, pi * 0.999 * 0.4 )
	) -
		HOAEncoder.ar(5, WhiteNoise.ar(0.05),
			SinOsc.ar(0.11, 0, pi * 0.999 ),
			SinOsc.ar(0.22, 0, pi * 0.999 * 0.4 )
		) -
		HOAEncoder.ar(5, BrownNoise.ar(0.2),
			SinOsc.ar(0.12, 0, pi * 0.999 ),
			SinOsc.ar(0.23, 0, pi * 0.999 * 0.4 )
		)
	) }.play;
	s.meter;
	)

	#+end_src
	
